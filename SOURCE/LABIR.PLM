/*****************************************************************************
 *                                                                           *
 * CP/M game "Bolder Dash" for the PK8000 (full version)                     *
 * Copyright (C) 2023 Andrey Hlus                                            *
 *                                                                           *
 *****************************************************************************/
LABIRINT: DO;

$CODE

$INCLUDE(:F1:CTRL.EXT)
$INCLUDE(:F1:GRAPP.EXT)
$INCLUDE(:F1:CONS.EXT)
$INCLUDE(:F1:RSRC.EXT)
$INCLUDE(:F1:SOUND.EXT)
$INCLUDE(:F1:TIMER.EXT)

declare
  MAX_MONSTERS literally '128',
  MAP_WIDTH    literally 'Rsrc_FieldWidth',
  MAP_HEIGHT   literally 'Rsrc_FieldHeight',
  MAP_SIZE     literally 'Rsrc_FieldSize',
  LOG_WIDTH    literally 'Rsrc_LogWidth',
  LOG_HEIGHT   literally 'Rsrc_LogHeight',

  None         literally  '0',
  Grass        literally  '1',
  Stone        literally  '2',
  Almas        literally  '3',
  StopMan      literally  '4',
  Wall         literally  '5',
  Mina         literally  '6',
  Babo         literally  '7',
  LeftMan      literally  '8', /* Don't change */
  LeftMan1     literally  '9',
  RightMan     literally '10',
  RightMan1    literally '11', /* Don't change */
  UpMan        literally '12', /* the order!!! */
  UpMan1       literally '13',
  DownMan      literally '14',
  DownMan1     literally '15', /* the order!!! */
  Mina1        literally '16',
  Babo1        literally '17',

  LastSprite   literally 'Babo1',
  ActiveStone1 literally 'LastSprite + 1',
  ActiveStone2 literally 'LastSprite + 2',
  ActiveAlmas1 literally 'LastSprite + 3',
  ActiveAlmas2 literally 'LastSprite + 4';

declare
  SideRight    literally '2',
  SideLeft     literally '-2';




declare
  monstr(MAX_MONSTERS) TMONSTR,
  monstrsNum byte,
  objX       byte,
  objY       byte,
  objCell    byte,

  manX       byte,
  manY       byte,
  manDirX    byte,              /* signed! */
  manDirY    byte,              /* signed! */

  manPresent byte,

  lab_Lives  byte,
  lab_Score  address;





declare
  adrLine    address,           /* времянка для более быстрого доступа к карте */
  adrPos     address,
  mapCell    based adrPos(256) byte,
  tmpCell    byte;





lab_AnyKey: procedure;
  declare
    ch byte;

    call Timer_Start(125);      /* ждем максимум 2.5 секунды */
    do while 1;
        ch = Ctrl_Get;
        if ch <> 0 then
            Break;
        if Timer_Check = 0 then
            Break;
    end;
    do while ch <> 0;
        ch = Ctrl_Get;
    end;
end;



Unpack: procedure (level);
  declare
    level   byte,
    idx     address,
    val     byte,
    bitCnt  byte,
    n       byte,
    map$Ptr address,
    map$b based map$Ptr byte;

    map$Ptr = .Rsrc_Levels(level * Rsrc_LevelSize);
    idx = 0;
    val = map$b; map$Ptr = map$Ptr + 1;
    bitCnt = 8;
    do while idx < MAP_SIZE;
        /* Unpacking and normalizing 3 bits from package: */
        tmpCell = 0;
        do n = 0 to 2;
            if bitCnt = 0 then do;
                val = map$b; map$Ptr = map$Ptr + 1;
                bitCnt = 8;
            end;
            bitCnt = bitCnt - 1;
            tmpCell = shr(tmpCell, 1) + shl((val and 1),2);
            val = shr(val, 1);
        end;
        Rsrc_field(idx) = tmpCell and 7;
        idx = idx + 1;
    end;
end;


/*
  вывод карты с прокруткой влево
*/
Display: procedure (level, score);
  declare
    level byte,
    score address,
    (x, y) byte;

    /* выводим количество жизней */
    call Timer_Start( (120*Timer_Mul/Timer_Div)/10 + 20);
    call Con_Colors(LCyan);
    call Con_WriteStr(.(1Bh,'Y',12,7, 'Stage ',0)); call Con_WriteDec(level);
    call Con_WriteStr(.(1Bh,'Y',12,8, 'Lives ',0)); call Con_WriteDec(lab_Lives);
    call Con_WriteStr(.(1Bh,'Y',12,9, 'Score ',0)); call Con_WriteDec(score);
    call Timer_Until;

    x = 0;
    call Con_Colors(0);
    do while x < LOG_WIDTH;
        call Timer_Start( (10*Timer_Mul/Timer_Div + 5)/10 );
        if x > 11 then
            if x < 23 then do;
                call Con_At(x,7); call Con_WriteCh(' ');
                call Con_At(x,8); call Con_WriteCh(' ');
                call Con_At(x,9); call Con_WriteCh(' ');
            end;
        call GrApp_ScrollLeft;
        call Timer_Until;
        call Timer_Start( (10*Timer_Mul/Timer_Div + 5)/10 );
        if x > 11 then
            if x < 23 then do;
                call Con_At(x+1,7); call Con_WriteCh(' ');
                call Con_At(x+1,8); call Con_WriteCh(' ');
                call Con_At(x+1,9); call Con_WriteCh(' ');
            end;
        call GrApp_ScrollLeft;
        y = 0;
        do while y < LOG_HEIGHT;
            call GrApp_DrawTile(x, y, Rsrc_GetTileByNum(Rsrc_GetCell(x, y)));
            y = y + 2;
        end;
        x = x + 2;
        call Timer_Until;
    end;
end;



DisplayInf: procedure;               /* сворачиваем экран прокруткой вправо */
  declare
    (x, y) byte,
    n byte;

    x = 0;
    do while x < LOG_WIDTH;
        call Timer_Start( (10*Timer_Mul/Timer_Div + 5)/10 );
        y = 0;
        do while y < LOG_HEIGHT;
            call GrApp_HideTile((LOG_WIDTH-2) - x, y);
            y = y + 2;
        end;
        call GrApp_ScrollRight;
        call Timer_Until;
        call Timer_Start( (10*Timer_Mul/Timer_Div + 5)/10 );
        call GrApp_ScrollRight;
        call Timer_Until;
        x = x + 2;
    end;
end;



LookForObjects: procedure;
  declare
    (x, y) byte,
    idx address,
    n byte,
    mptr address,
    mon based mptr TMONSTR;

    mptr = .monstr(0);
    monstrsNum = 0;     /* Выловим координаты человека, бабочек и мин */
    manPresent = 0;
    idx = 0;
    y = 0;
    x = 0;
    do while idx < MAP_SIZE;
        n = Rsrc_field(idx);
        if (n = Mina) or (n = Babo) then do;
            mon.mx = x;
            mon.my = y;
            mon.dx = 0;
            mon.dy = 0;
            monstrsNum = monstrsNum + 1;
            mptr = mptr + size(mon);
        end;
        else if n = StopMan then do;
            manPresent = 1;
            manX = x;
            manY = y;
        end;
        x = x + 2;
        if x >= LOG_WIDTH then do;
            y = y + 2;
            x = 0;
        end;
        idx = idx + 1;
    end;
end;


/*
  Засыпание алмазами человечка, на которого наехала бабочка или мина,
  и человечка, бабочки или мины, на которых упал камень или алмаз
*/
SceneOfDeath: procedure (x, y);
  declare
    (x, y) byte,
    plusX byte,
    minusX byte,
    plusY byte,
    minusY byte,
    tX byte,
    tY  byte,
    ctr address,
    lim address;

    if x > 2 then minusX = x - 2; else minusX = 0;
    if y > 2 then minusY = y - 2; else minusY = 0;
    if x > LOG_WIDTH-4 then plusX = LOG_WIDTH-2; else plusX = x + 2;
    if y > LOG_HEIGHT-4 then plusY = LOG_HEIGHT-2; else plusY = y + 2;

    tY = minusY;
    do while tY <= plusY;
        tX = minusX;
        do while tX <= plusX;
            call GrApp_DrawTile(tX, tY, .Tile_Almas);
            call Rsrc_SetCell(tX, tY, Almas);
            tX = tX + 2;
        end;
        tY = tY + 2;
    end;
    call Snd_Death(y);
end;



/*
  Для летящих в клетке камней и алмазов - прилёт на опору
*/
Deactivate: procedure;
    if objCell = ActiveStone2 then do;
        call GrApp_DrawTile(objX, objY, .Tile_Stone);
        mapCell(0) = Stone;                /* R.SetCell(objX, objY, Stone); */
    end;
    else do;
        call GrApp_DrawTile(objX, objY, .Tile_Almas);
        mapCell(0) = Almas;                /* R.SetCell(objX, objY, Almas); */
    end;
    call Snd_DropObject(objY);             /* Камень или алмаз теперь лежит */
END Deactivate;


/*
  Для летящих в клетке камней и алмазов - разрешение пролёта вниз дальше.
*/
CanFlyThru: procedure byte;
    if objY = LOG_HEIGHT-2 then
        return 0;                   /* Нельзя - упали на границу лабиринта. */
    tmpCell = mapCell(MAP_WIDTH);
    if tmpCell = Wall then
       return 0;       /* Нельзя - упали на траву, стену, камень или алмаз. */
    if tmpCell = Grass then
       return 0;
    if tmpCell = Stone then
       return 0;
    if tmpCell = Almas then
       return 0;
    if tmpCell = ActiveStone1 then
       return 0;
    if tmpCell = ActiveAlmas1 then
       return 0;
    if tmpCell = ActiveStone2 then
       return 0;
    if tmpCell = ActiveAlmas2 then
       return 0;
    /*
    if (tmpCell = Wall) or (tmpCell = Grass) or
       (tmpCell = Stone) or (tmpCell = Almas) or
       (tmpCell = ActiveStone1) or (tmpCell = ActiveAlmas1) or
       (tmpCell = ActiveStone2) or (tmpCell = ActiveAlmas2)    then
       return 0;
    */

    /*
      Можно - впереди пусто или убиваемый объект.
    */
    return 1;
end;


/*
  Для летящих в клетке камней - переход в положение между двумя клетками
*/
NextFall: procedure;
    tmpCell = mapCell(MAP_WIDTH);
    if tmpCell = None then do;
        call GrApp_HideTile(objX, objY);
        if objCell = ActiveStone2 then do;
            call GrApp_DrawTile(objX, objY + 1, .Tile_Stone);
            mapCell(0) = ActiveStone1;
            mapCell(MAP_WIDTH) = ActiveStone1;
        end; else do;
            call GrApp_DrawTile(objX, objY + 1, .Tile_Almas);
            mapCell(0) = ActiveAlmas1;
            mapCell(MAP_WIDTH) = ActiveAlmas1;
        end;
    end;
    else do;
        if tmpCell <> Grass then
            if tmpCell <> Stone then
                if tmpCell <> Almas then
                    if tmpCell <> Wall then
                        do;
                            call SceneOfDeath(objX, objY + 2);
                            objX = objX + 2;
                            adrPos = adrPos + 1;
                        end;
    end;
    /*
    else if (tmpCell <> Grass) and (tmpCell <> Stone) and
                 (tmpCell <> Almas) and (tmpCell <> Wall) then do;
        call SceneOfDeath(objX, objY + 2);
        objX = objX + 2;
        adrPos = adrPos + 1;
    end;
    */
end;


/*
  Разрешение падения прямо вниз из неподвижного положения.
*/
CanStartFall: procedure byte;
    if objY < LOG_HEIGHT-2 then
        if mapCell(MAP_WIDTH) = None then
            return 1;
    return 0;
end;


/*
  Разрешение скатывания в сторону: side = -2 (SideLeft) | 2 (SideRight).
*/
CanRollTo: procedure(x) byte;
  declare
    x byte;

    if x <= LOG_WIDTH-2 then
        if objY < LOG_HEIGHT-2 then
            if Rsrc_GetCell(x, objY) = None then
                if Rsrc_GetCell(x, objY + 2) = None then
                    return 1;
    return 0;
    /*
    return (x <= LOG_WIDTH-2) and
           (objY < LOG_HEIGHT-2) and
           (Rsrc_GetCell(x, objY) = None) and
           (Rsrc_GetCell(x, objY + 2) = None);
    */
end;


/*
  Скатывание в сторону side на 1 клетку
*/
RollTo: procedure (side);
  declare
    side byte;

    mapCell(0) = None;
    call Rsrc_SetCell(objX + side, objY, objCell);
    call GrApp_HideTile(objX, objY);
    call GrApp_DrawTile(objX + side, objY, Rsrc_GetTileByNum( objCell ));
    /*
     Специфично для скатывания вправо - чтобы этот камень или алмаз мог
     только скатиться и не был повторно обработан в следующей клетке -
     мы его новую клетку пропускаем:
    */
    if side = SideRight then do;
        objX = objX + 2;
        adrPos = adrPos+1;
    end;
END RollTo;


/*
  Перевод неподвижного камня или алмаза в активное состояние и
  в положение между 2 клетками.
*/
Activate: procedure;
    call GrApp_HideTile(objX, objY);
    if objCell = Stone then do;
        /* Занимает 2 клетки. */
        call GrApp_DrawTile(objX, objY + 1, .Tile_Stone);
        mapCell(0) = ActiveStone1;
        mapCell(MAP_WIDTH) = ActiveStone1;
    end; else do;
        call GrApp_DrawTile(objX, objY + 1, .Tile_Almas);
        mapCell(0) = ActiveAlmas1;
        mapCell(MAP_WIDTH) = ActiveAlmas1;
    end;
END Activate;


/*
  Номер спрайта первой фазы человечка для заданного направления движения
*/
GetManSprite: procedure byte;
    if manDirX = 0 then do;
        /* Движение по вертикали */
        if manDirY = 1 then
            return DownMan;          /* вниз */
        if manDirY = -1 then
            return UpMan;            /* вверх */
        return StopMan;              /* на месте (не бывает) */
    end;
    if manDirY = 0 then do;
        /* Движение по горизонтали */
        if manDirX = 1 then
            return RightMan;         /* вправо */
        if manDirX = -1 then
            return LeftMan;          /* влево */
        return StopMan;              /* на месте (не бывает) */
    end;
    return None;                     /* Неверная ситуация (не бывает) */
end;


/*
  Разрешение прохода в данном направлении
*/
ManCanGo: procedure byte;
  declare
    (x, y) byte,
    (tx, ty) byte,
    cell byte;

    x = manX + manDirX + manDirX;
    y = manY + manDirY + manDirY;

    if x < LOG_WIDTH then
        if y < LOG_HEIGHT then
        do;
            cell = Rsrc_GetCell(x, y);
            /* if (cell = Wall) or (cell = ActiveStone1) or (cell = ActiveAlmas1) then */
            if cell = Wall then
                return 0;          /* Пройти нельзя */
            if cell = ActiveStone1 then
                return 0;          /* Пройти нельзя */
            if cell = ActiveAlmas1 then
                return 0;          /* Пройти нельзя */
            if (cell = Stone) or (cell = ActiveStone2) then do;
                /* Попробуем протолкнуть камни */
                tx = x;
                ty = y;
                do while 1;
                    if tx >= LOG_WIDTH then
                        return 0;                   /* Протолкнуть камни нельзя */
                    if ty >= LOG_HEIGHT then
                        return 0;                   /* Протолкнуть камни нельзя */

                    tmpCell = Rsrc_GetCell(tx, ty);

                    if tmpCell = None then
                        Break;

                    if tmpCell <> Stone then
                        if tmpCell <> ActiveStone2 then
                            return 0;               /* Протолкнуть камни нельзя */

                    tx = tx + manDirX + manDirX;
                    ty = ty + manDirY + manDirY;
                end; /* while */
                call Rsrc_SetCell(tx, ty, Stone);
                call Rsrc_SetCell(x, y, None);
                call GrApp_DrawTile(tx, ty, .Tile_Stone);
                call GrApp_HideTile(x, y);
            end;
            return 1;               /* Иначе - пройти в таком направлении можно */
        end;
    return 0;
end;


/*
  Перевод человечка из текущей клетки в положение между двумя клетками
  Разрешение дальнейшего существования человечка
*/
ManGoingTo: procedure (x, y) byte;
  declare
    (x, y) byte,
    cell byte,

    doDeath label;

    cell = Rsrc_GetCell(x, y);
    /*
    if (cell = Mina) or (cell = Babo) or (cell = Mina1) or (cell = Babo1) then do;
        call SceneOfDeath(x, y);
        return 0;
    end;
    */
    if cell = Mina then goto doDeath;
    if cell = Babo then goto doDeath;
    if cell = Mina1 then goto doDeath;
    if cell = Babo1 then goto doDeath;

    if (cell = Almas) or (cell = ActiveAlmas2) then do;
        lab_Score = lab_Score + 1;
        call Snd_GetAlmas(x+y);
    end;
    return 1;

doDeath:
    call SceneOfDeath(x, y);
    return 0;
end;



TryMoveMan: procedure;
  declare
    (x, y) byte,
    manSprite byte;

    if ManCanGo = 0 then
        manSprite = StopMan;                 /* Остановить человечка */
    else do;
        x = manX + manDirX + manDirX;
        y = manY + manDirY + manDirY;
        manSprite = ManGoingTo(x, y);
        if manSprite = 0 then
            return;                          /* смерть и выход */
        manSprite = GetManSprite;
        call Rsrc_SetCell(x, y, manSprite);  /* Отметить следующую позицию */
        call GrApp_HideTile(manX, manY);     /* Стереть предыдущий спрайт */
        manX = manX + manDirX;
        manY = manY + manDirY;
    end;
    /* Вывести новый спрайт */
    call GrApp_DrawTile(manX, manY, Rsrc_GetTileByNum(manSprite));
end;


/*
  Перевод человечка из состояния между двумя клетками в одну клетку
  (продолжение предыдущего движения)
*/
ManContinuesGoing: procedure;
  declare
    plusX  byte,
    minusX byte,
    plusY  byte,
    minusY byte;

    plusX  = manX + manDirX;
    minusX = manX - manDirX;
    plusY  = manY + manDirY;
    minusY = manY - manDirY;
    call GrApp_HideTile(minusX, minusY);
    if Rsrc_GetCell(minusX, minusY) = StopMan then  /* Откат на полшага назад */
        call Rsrc_SetCell(minusX, minusY, None);

    call GrApp_DrawTile(plusX, plusY, Rsrc_GetTileByNum(Rsrc_GetCell(plusX, plusY) + 1)); /* Бегущая фаза (следующая) */
    call Rsrc_SetCell(plusX, plusY, StopMan);
    manX = plusX;
    manY = plusY;
end;


/*
  Признак присутствия человечка в клетке, соответствующей его координатам
*/
CheckMan: procedure byte;

    tmpCell = Rsrc_GetCell(manX, manY);
    if tmpCell = StopMan then
        return 1;
    if tmpCell >= LeftMan then
        if tmpCell <= DownMan1 then
            return 1;
    return 0;
    /*return (tmpCell = StopMan) or (tmpCell >= LeftMan) and (tmpCell <= DownMan1);*/
end;


/*****************************************************************************
 -----------------------------------------------------------------------------
 -------------- Live of monsters - flyes (babo) and mines (mina) -------------
 -----------------------------------------------------------------------------
 *****************************************************************************/

/*
  Вычисление противофазы для бабочки или мины
*/
NextMonstrPhase: procedure (cell) byte;
  declare
    cell byte;

    if cell = Babo then
        return Babo1;
    else if cell = Babo1 then
        return Babo;
    else if cell = mina then
        return Mina1;
    return Mina;
end;


/*
  Продолжение движения бабочки или мины - аналогично как для камней
  или человечка. Из промежуточного положения - в целую клетку
*/
MonstrContinuesGoing: procedure (monptr);
  declare
    monptr address,
    mon based monptr TMONSTR,
    newX byte,
    newY byte,
    oldX byte,
    oldY byte;

    oldY = mon.my - mon.dy;
    oldX = mon.mx - mon.dx;
    newY = mon.my + mon.dy;
    newX = mon.mx + mon.dx;
    mon.mx = newX;
    mon.my = newY;

    tmpCell = NextMonstrPhase(Rsrc_GetCell(oldX, oldY));

    call Rsrc_SetCell(oldX, oldY, None);
    call Rsrc_SetCell(newX, newY, tmpCell);
    call GrApp_HideTile(oldX, oldY);
    call GrApp_DrawTile(newX, newY, Rsrc_GetTileByNum(tmpCell));
end;


/*
  Исключение бабочки или мины, убитой камнем или алмазом,
  из списка действующих монстров.
  На входе:
    n - номер монстра (бабочки или мины)
*/
ExcludeMonstr: procedure (n);
  declare
    n byte,
    x byte,
    y byte,
    pMon address,
    mon based pMon TMONSTR;

    pMon = .monstr(n);
    x = mon.mx;
    y = mon.my;

    if ((x or y) and 1) <> 0 then do;  /* if ((x and 1) <> 0) or ((y and 1) <> 0) then do; */
        /*
          Удаление из промежуточной позиции
        */
        x = x + mon.dx;
        y = y + mon.dy;
        call Rsrc_SetCell(x, y, None);
        call GrApp_HideTile(x, y);
    end;

    /* сдвигаем массив монстров */
    monstrsNum = monstrsNum -1;
    call MOVE((monstrsNum-n)*SIZE(mon), pMon + SIZE(Mon), pMon);
    /* MOVE(cnt, src, dst) */
    /*
    do while n < monstrsNum;
        monstr(n).mx = monstr(n + 1).mx;
        monstr(n).my = monstr(n + 1).my;
        monstr(n).dx = monstr(n + 1).dx;
        monstr(n).dy = monstr(n + 1).dy;
        n = n + 1;
    end;
    */
end;


/*
  Знак аргумента.
  Результат: -1 для отрицательного, 1 для положительного и нуля.
*/
Sign: procedure (x) byte;
  declare
    x byte;

    if x >= 80h then           /* if (x and 80h) <> 0 then */
        return -1;
    return 1;
end;


/*
  Попытка сдвига монстра N из клетки
*/
TryMoveMonstr: procedure (pMon);
  declare
    pMon address,
    mon based pMon TMONSTR,
    cell byte,
    (cx, cy) byte,
    max    byte,
    mark byte,
    (tx, ty) byte,     /* signed */
    (dx, dy) byte,     /* signed */
    i byte,            /* signed */
    moves byte,        /* signed */
    canMove(4) byte;   /* направления движения монстра */

    cx = mon.mx;
    cy = mon.my;
    tmpCell = NextMonstrPhase(Rsrc_GetCell(cx, cy));

    /* просмотр по 4-м сторонам света c севера против часовой стрелки: */
    moves = -1;

    i = 3;
    do while i <> -1;       /* i := 3 TO 0 BY -1 {север, запад, юг, восток} */
        /* проследить, куда может двинуться монстр с этого места */
        tx = cx + Rsrc_Cross2X(i);
        ty = cy + Rsrc_Cross2Y(i);

        if (tx <= LOG_WIDTH-2) then            /* tx,ty неявно проверяются здесь и на >= 0 (приведены к беззнаковым) */
            if (ty <= LOG_HEIGHT-2) then
            do;
                cell = Rsrc_GetCell(tx, ty);
                /* if (cell = None) or (cell = StopMan) */
                if cell = None then do;
                    /* двинуться можно */
                    moves = moves + 1;
                    canMove(moves) = i;            /* вариант включен в список. */
                    end;
                else if cell = StopMan then do;
                    /* двинуться можно */
                    moves = moves + 1;
                    canMove(moves) = i;            /* вариант включен в список. */
                end;
            end;
        i = i - 1;
    end;

    /* сейчас moves = количество возможных ходов монстра - 1 (оптимизация) */

    /* =============== Проверяется всё множество вариантов: ================ */
    if moves >= 80h then do;          /* if (moves < 0) */
        /* монстр зажат со всех сторон - нет выбора. */
        call Rsrc_SetCell(cx, cy, tmpCell);
        call GrApp_DrawTile(cx, cy, Rsrc_GetTileByNum(tmpCell));
        /* monstr[n].dx и monstr[n].dy в 0 не устанавливаем - смещения неважны,
           ибо продолжение движения возможно только для непарных cx и cy. */
        end;
    else do;
        if moves = 0 then do;
            /* только один вариант - монстр отражается от тупика коридора */
            dx = Rsrc_CrossX(canMove(0));
            dy = Rsrc_CrossY(canMove(0));
            end;
        else do;
            /* много вариантов, ищем и убираем худший (обратное движение) */
            dx = -mon.dx;
            dy = -mon.dy;
            i = 0;
            do while 1;           /* i := 0 TO moves */
                if Rsrc_CrossX(canMove(i)) = dx then
                    if Rsrc_CrossY(canMove(i)) = dy then do;
                        /* уменьшаем кол-во вариантов */
                        do while i < moves;
                            canMove(i) = canMove(i + 1);
                            i = i + 1;
                        end;
                        /* обратное движение найдено и вычеркнуто из списка вариантов. */
                        moves = moves - 1;
                    end;
                i = i + 1;
                if i > moves then
                    Break;
            end; /* while */

            if moves = 0 then do;
                /* остался только один вариант - продвижение объекта по коридору*/
                dx = Rsrc_CrossX(canMove(0));
                dy = Rsrc_CrossY(canMove(0));
                end;
            else do;
                /* только здесь оцениваем направление к человечку */
                tx = Sign(manX - cx);
                ty = Sign(manY - cy);
                max = 0;
                i = 0;
                do while 1;       /* i := 0 TO moves */
                    /* можно бы пустить цикл от moves до 0, но нарушится порядок поиска. */
                    mark = ABS(Rsrc_CrossX(canMove(i)) + tx) + ABS(Rsrc_CrossY(canMove(i)) + ty);
                    if mark > max then do;
                        max = mark;
                        dx = Rsrc_CrossX(canMove(i));
                        dy = Rsrc_CrossY(canMove(i));
                    end;
                    i = i + 1;
                    if i > moves then
                        Break;
                end;

            end;
        end;

        /* направление движения монстра определено [dx, dy]. */
        call GrApp_HideTile(cx, cy);
        cx = cx + dx;
        cy = cy + dy;
        call GrApp_DrawTile(cx, cy, Rsrc_GetTileByNum(tmpCell));
        call Rsrc_SetCell(cx + dx, cy + dy, tmpCell);
        mon.mx = cx;
        mon.my = cy;
        mon.dx = dx;
        mon.dy = dy;
    end; /* if moves < 0 */
end;




lab_Play: procedure (level) address public;
  declare
    level byte,
    (x,y) byte,
    side  byte,
    number byte,
    keys byte,
    cell byte,
    isodd byte,
    pMon address,
    cMon based pMon TMONSTR,
    totalScore address,
    startLevel byte,
    isPlayGame byte,
    isPlayLevel byte;

    /*
      игровой цикл
    */
    startLevel = level;
    lab_Lives = 10;
    totalScore = 0;                             /* набранные за игру очки */
    isPlayGame = 1;

    do while isPlayGame <> 0;
        /*
          цикл по стадиям
        */
        call GrApp_Cls;

        call Unpack(level);
        call Display(level, totalScore);
        call LookForObjects;

        if manPresent = 0 then
            Break;                              /* не с кем играть */
        if monstrsNum = 0 then
            Break;                              /* не с кем играть */

        isPlayLevel = 0;
        lab_Score = 0;                          /* очки за текущий уровень */
        side = SideRight;

        do while isPlayLevel = 0;
            /*
              цикл одной стадии
            */
            call Timer_Start( (20*Timer_Mul/Timer_Div + 5)/10 ); /* 1/9 second per phase */

            /*
              ход игрока
            */
            if ((manX or manY) and 1) <> 0 then   /* if ((manX and 1) <> 0) or ((manY and 1) <> 0) then */
                call ManContinuesGoing;  /* нечетные координаты, продолжаем начатый ход */
            else do;
                /* управляем человечком */
                keys = Ctrl_Get;
                if keys = Ctrl_KeyUp then do;
                    manDirX = 0;
                    manDirY =-1;
                    call TryMoveMan;
                    end;
                else if keys = Ctrl_KeyDown then do;
                    manDirX = 0;
                    manDirY = 1;
                    call TryMoveMan;
                    end;
                else if keys = Ctrl_KeyLeft then do;
                    manDirX =-1;
                    manDirY = 0;
                    call TryMoveMan;
                    end;
                else if keys = Ctrl_KeyRight then do;
                    manDirX = 1;
                    manDirY = 0;
                    call TryMoveMan;
                    end;
                else if keys = Ctrl_ScanF5 then do;
                    isPlayLevel = 2;                    /* 2 - restart */
                    end;
                else if keys = Ctrl_ScanEsc then do;
                    isPlayLevel = 1;                    /* 1 - exit to menu */
                    end;
                else do;
                    manDirX = 0;
                    manDirY = 0;
                end;
            end;
            if manPresent = 0 then
                Break;

            /*------------Д-В-И-Ж-Е-Н-И-Е---К-А-М-Н-Е-Й---И---А-Л-М-А-З-О-В------------*/
            number = 0;
            objY   = LOG_HEIGHT;
            adrLine = .Rsrc_field(MAP_WIDTH*(MAP_HEIGHT - 1));
            /*
              просмотр снизу вверх по строкам
            */
            do while objY > 0;
                objY = objY - 2;
                objX = 0;
                adrPos = adrLine;
                /*
                  просмотр строки слева направо
                */
                do while objX < LOG_WIDTH;
                    objCell = mapCell(0);          /* SYSTEM.GET(adr, objCell); */

                    if objCell = Almas then
                        do;
                            /* неактивный алмаз */
                            number = number + 1;
                            if CanStartFall then
                                call Activate;          /* начать падение */
                            else do;
                                side = -side;
                                if CanRollTo(objX + side) then
                                    call RollTo(side);  /* попытаться скатиться */
                                else if CanRollTo(objX - side) then
                                    call RollTo(-side); /* в другую сторону */
                            end;
                        end;
                    else if objCell = ActiveAlmas1 then
                        do;
                            /* Almas, пролетающий между клетками */
                            number = number + 1;
                            call GrApp_HideTile(objX, objY - 2);
                            call GrApp_DrawTile(objX, objY, .Tile_Almas);
                            mapCell(0) = ActiveAlmas2;
                            mapCell(- double(MAP_WIDTH)) = None;
                        end;
                    else if objCell = ActiveAlmas2 then
                        do;
                            /* камень или алмаз, пролетающий через клетку */
                            number = number + 1;
                            if CanFlyThru then
                                call NextFall;          /* либо летит дальше */
                            else
                                call Deactivate;        /* либо падает на опору */
                        end;
                    else if objCell = Stone then
                        do;
                            /* неактивный камень */
                            if CanStartFall then
                                call Activate;          /* начать падение */
                            else do;
                                side = -side;
                                if CanRollTo(objX + side) then
                                    call RollTo(side);  /* попытаться скатиться */
                                else if CanRollTo(objX - side) then
                                    call RollTo(-side); /* в другую сторону */
                            end;
                        end;
                    else if objCell = ActiveStone1 then
                        do;
                            /* stone, пролетающий между клетками */
                            call GrApp_HideTile(objX, objY - 2);
                            call GrApp_DrawTile(objX, objY, .Tile_Stone);
                            mapCell(0) = ActiveStone2;
                            mapCell(- double(MAP_WIDTH)) = None;
                        end;
                    else if objCell = ActiveStone2 then
                        do;
                            /* камень или алмаз, пролетающий через клетку */
                            if CanFlyThru then
                                call NextFall;          /* либо летит дальше */
                            else
                                call Deactivate;        /* либо падает на опору */
                        end;

                    objX = objX + 2;
                    adrPos = adrPos + 1;
                end; /* while */

                adrLine = adrLine - MAP_WIDTH;
            end; /* while objY > 0;*/

            manPresent = CheckMan;
            if manPresent = 0 then
                Break;

            if number = 0 then do;
                /* доделываем ход до конца клетки */
                call Timer_Until;
                call ManContinuesGoing;
                Break;
            end;


            /*---------------Д-В-И-Ж-Е-Н-И-Е---Б-А-Б-О-Ч-Е-К---И---М-И-Н---------------*/
            number = 0;
            do while number < monstrsNum;
                pMon = .monstr(number);

                isodd = 0;
                x = cMon.mx;
                y = cMon.my;
                if (x and 1) <> 0 then do;
                    x = x - cMon.dx;   /* отход назад */
                    isodd = 1;
                end;
                if (y and 1) <> 0 then do;
                    y = y - cMon.dy;
                    isodd = 1;
                end;

                cell = Rsrc_GetCell(x, y);
                if cell = Mina then
                    do;
                        if isodd <> 0 then
                            call MonstrContinuesGoing(pMon);
                        else
                            call TryMoveMonstr(pMon);
                        number = number + 1;
                    end;
                else if cell = Babo then
                    do;
                        if isodd <> 0 then
                            call MonstrContinuesGoing(pMon);
                        else
                            call TryMoveMonstr(pMon);
                        number = number + 1;
                    end;
                else if cell = Mina1 then
                    do;
                        if isodd <> 0 then
                            call MonstrContinuesGoing(pMon);
                        else
                            call TryMoveMonstr(pMon);
                        number = number + 1;
                    end;
                else if cell = Babo1 then
                    do;
                        if isodd <> 0 then
                            call MonstrContinuesGoing(pMon);
                        else
                            call TryMoveMonstr(pMon);
                        number = number + 1;
                    end;
                else
                    do;
                        /*
                          уничтожаем объект, он был разбит
                        */
                        call ExcludeMonstr(number);
                    end;
            end; /* while */

            manPresent = CheckMan;
            if manPresent = 0 then
                call SceneOfDeath(manX, manY);

            call Timer_Until;
            if manPresent = 0 then
                Break;

        end; /* do while isPlayLevel = 0 */

        call DisplayInf;
        /*
          закончили очередной уровень, определяем дальнейшие действия
        */
        do case isPlayLevel;
            do;                 /* 0 - погибли, или собрали все алмазы*/
                if manPresent <> 0 then
                    do;
                        totalScore = totalScore + lab_Score;
                        lab_Lives = lab_Lives + 1;
                        level = level + 1;
                    end;
                else if lab_Lives > 0 then
                         lab_Lives = lab_Lives - 1;
            end;
            do;                 /* 1 - exit to menu */
                isPlayGame = 0;
            end;
            do;                 /* 2 - restart */
                if lab_Lives > 0 then
                    lab_Lives = lab_Lives - 1;
            end;
        end;

        /*
          проверяем условия выхода из игры
        */
        if (lab_Lives = 0) or (level = Rsrc_MaxLevelNumber) then
            isPlayGame = 0;

    end; /* while isPlayGame <> 0 */

    /*
      закончили игру, уходим в главное меню
    */
    if level = Rsrc_MaxLevelNumber then do;
        /*
          заканчиваем игру по прохождении последнего уровня
        */
        call Con_At(14, 7); call Con_WriteStr(.(1Bh,'C',LCyan,1Bh,'Y',14,7, 'YOU', 1Bh,'Y',14,8, 'WIN!', 0));
        if (level - startLevel) = Rsrc_MaxLevelNumber then
            totalScore = totalScore + (lab_Lives * 12);  /* бонус только по полному прохождению */
    end;
    else do;
        /*
          заканчиваем игру по окончании жизней или выход по ESC
        */
        call Con_At(14, 7); call Con_WriteStr(.(1Bh,'C',LWhite,1Bh,'Y',14,7, 'GAME', 1Bh,'Y',14,8, 'OVER', 0));
    end;
    call lab_AnyKey;

    return totalScore;
end;


end;


